const.rhs=c(const1,const2)
const.dir=c("<=","<=")
opt=lp(direction = "max",objective.in,const.mat,const.dir,const.rhs)
opt$solution
maxprofit<-opt$objval
maxprofit
10000/12
objective.in=c(196.00,-11.22)
const.mat=matrix(c(1,-.09,0,1),nrow = 2,byrow = T)
const1 =0
const2=833
const.rhs=c(const1,const2)
const.dir=c("<=","<=")
opt=lp(direction = "max",objective.in,const.mat,const.dir,const.rhs)
opt$solution
maxprofit<-opt$objval
maxprofit
7244/684
7244.93/684
objective.in=c(196.86,-10.59)
<!-- Using historical data row 5-->
const.mat=matrix(c(1,-.09,0,1),nrow = 2,byrow = T)
const1 =0
const2=1556
const.rhs=c(const1,const2)
const.dir=c("<=","<=")
opt=lp(direction = "max",objective.in,const.mat,const.dir,const.rhs)
opt$solution
maxprofit<-opt$objval
maxprofit
1556* 10.59
1556/16
1556*11.22
1400*16
22400/11.22
22400/10.59
objective.in=c(196.86,-10.59)
<!-- Using historical data row 5-->
const.mat=matrix(c(1,-.09,0,1),nrow = 2,byrow = T)
const1 =0
<!-- 1556*10.59 = 16478.04 ; budget simulator suggested 1556-->
const2=2115
const.rhs=c(const1,const2)
const.dir=c("<=","<=")
opt=lp(direction = "max",objective.in,const.mat,const.dir,const.rhs)
opt$solution
maxprofit<-opt$objval
maxprofit
1091*16
17456/10.59
objective.in=c(196.86,-10.59)
<!-- Using historical data row 5-->
const.mat=matrix(c(1,-.09,0,1),nrow = 2,byrow = T)
const1 =0
<!-- budget simulator suggested 1400*16 budget /# of clicks =2115
old performance 1091*16 /# of clicks = 1648 -->
const2=2115
const.rhs=c(const1,const2)
const.dir=c("<=","<=")
opt=lp(direction = "max",objective.in,const.mat,const.dir,const.rhs)
opt$solution
maxprofit<-opt$objval
maxprofit
objective.in=c(196.86,-10.59)
<!-- Using historical data row 5-->
const.mat=matrix(c(1,-.09,0,1),nrow = 2,byrow = T)
const1 =0
<!-- budget simulator suggested 1400*16 budget /# of clicks =2115/CM :15,074
old performance 1091*16 /# of clicks = 1648 -->
const2=1648
const.rhs=c(const1,const2)
const.dir=c("<=","<=")
opt=lp(direction = "max",objective.in,const.mat,const.dir,const.rhs)
opt$solution
maxprofit<-opt$objval
maxprofit
View(newdat)
refinAGG <-refinancedata %>%filter(date< enddt & date > startdt)%>%
arrange(Cost)%>%select(Cost,CM,Clicks,Leads,Revenue,week,month)%>%group_by(week)%>%summarize(sumcost=sum(Cost),sumcm=sum(CM),sumclick=sum(Clicks),
sumRevenue=sum(Revenue),
sumconv=sum(Leads),
avgconv=mean(Leads),
avgclicks=mean(Clicks),
avgRev=mean(Revenue))%>% mutate(convrate=(sumconv/sumclick),cpc=(sumcost/sumclick),revperconv=sumRevenue/sumconv)
overallavg <-refinancedata %>%filter(date< enddt & date > startdt)%>%
arrange(Cost)%>%select(Cost,CM,Clicks,Leads,Revenue,week,month)%>%summarize(sumcost=sum(Cost),sumcm=sum(CM),sumclick=sum(Clicks),
sumRevenue=sum(Revenue),
sumconv=sum(Leads),
avgconv=mean(Leads),
avgclicks=mean(Clicks),
avgRev=mean(Revenue))%>% mutate(convrate=(sumconv/sumclick),cpc=(sumcost/sumclick),revperconv=sumRevenue/sumconv)
View(overallavg)
linear_model<-lm(sumcm~sumcost,data=newdat)
linear_model
summary(linear_model)
linear_model<-lm(sumcm~sumcost,data=refin)
linear_model<-lm(sumcm~sumcost,data=refinAGG)
summary(linear_model)
linear_model
linear_model<-lm(sumcm~sumcost,data=newdat)
pred<-predict(linear_model,topred)
topred<-data.frame(sumcost=10000)
pred<-predict(linear_model,topred)
View(topred)
topred<-data.frame(sumcost=10000)
pred<-predict(linear_model,topred)
pred
knots <- quantile(model_data$projectedspend, p = c(0.25, 0.5, 0.75))
model1<-lm(CM~bs(projectedspend,knots=knots),data=model_data)
summary(model1)
model1
predict(model1,data.frame(projectedspend=10000))
predict(model1,data.frame(projectedspend=1000))
View(model_data)
model_data<-budsim%>%select(projectedspend,CM)
# Polynomial Regression # CM = intercept + spend + spend ^2
model<-lm(CM~poly(projectedspend,2,raw=TRUE),data=model_data)
summary(model)
xmax <- optimize(f, c(0, 17000.11	), tol = 0.0001, maximum = TRUE)
xmax
xmax <- optimize(f, c(0, 19000.11	), tol = 0.0001, maximum = TRUE)
xmax
xmax <- optimize(f, c(0, 32000.11	), tol = 0.0001, maximum = TRUE)
xmax
model_data<-budsim%>%select(projectedspend,CM)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
install.packages("sjPlot")
install.packages("sjmisc")
install.packages("sjlabelled")
library(sjPlot)
library(sjmisc)
library(sjlabelled)
fit_curve<-function(x) (-4.902e+04) +(4.987e+00*x)+(-9.774e-05)*x^2
xmax <- optimize(fit_curve, c(0, 32000.11	), tol = 0.0001, maximum = TRUE)
xmax
maxcm <-floor(xmax$objective)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
options(scipen=999)
model_data<-budsim%>%select(projectedspend,CM)
# Polynomial Regression # CM = intercept + spend + spend ^2
model<-lm(CM~poly(projectedspend,2,raw=TRUE),data=model_data)
tab_model(model)
fit_curve<-function(x) (-4.902e+04) +(4.987e+00*x)+(-9.774e-05)*x^2
fit_curve
# Optimize the above curve
xmax <- optimize(fit_curve, c(0, 32000.11	), tol = 0.0001, maximum = TRUE)
maxcost<-floor(xmax$maximum)
maxcm <-xmax$objective
cst<-c(17000,18000)
xmax <- optimize(fit_curve, c(0, cst[i]	), tol = 0.0001, maximum = TRUE)
maxcost<-floor(xmax$maximum)
maxcm <- floor(xmax$objective)
maxcm
cst<-c(17000:32000)
cst[1]
cst[2]
dim(cst)
cst<-c(17000,18000,20000,22000,24000,26000,32000)
dim(cst)
dimensios(cst)
cst
ncol(cst)
dim(cst)
ncol(cst)
length(cst)
cst<-c(17000,18000,20000,22000,24000,26000,32000)
for ( i in 1:length(cst))
{
xmax <- optimize(fit_curve, c(0, cst[i]	), tol = 0.0001, maximum = TRUE)
maxcost[i]<-floor(xmax$maximum)
maxcm[i] <- floor(xmax$objective)
}
maxcost
maxcm
plot(maxcost,maxcm)
ggplot(maxcost,maxcm)
ggplot(aes(x=maxcost,x=maxcm))
ggplot(aes(x=maxcost,y=maxcm))
maxcost
maxcm
rbind(maxcost,maxcm)
cbind(maxcost,maxcm)
cbind(as.data.frame(maxcost,maxcm))
t<-as.data.frame(maxcost)
t1<-as.data.frame(maxcm)
cbind(t,t1)
View(xmax)
cst<-c(17000,18000,20000,22000,24000,26000,32000)
for ( i in 1:length(cst))
{
xmax <- optimize(fit_curve, c(0, cst[i]	), tol = 0.0001, maximum = TRUE)
maxcost[i]<-floor(xmax$maximum)
maxcm[i] <- floor(xmax$objective)
}
t<-as.data.frame(maxcost)
t1<-as.data.frame(maxcm)
proj
proj<-cbind(t,t1)
View(proj)
ggplot(data=proj,aes(x=maxcost,y=maxcm))+
geom_point()+geom_line()+ ggtitle('CM vs Cost')
library(sjPlot)
library(sjmisc)
library(sjlabelled)
options(scipen=999)
model_data<-budsim%>%select(projectedspend,CM)
# Polynomial Regression # CM = intercept + spend + spend ^2
model<-lm(CM~poly(projectedspend,2,raw=TRUE),data=model_data)
tab_model(model)
fit_curve<-function(x) (-4.902e+04) +(4.987e+00*x)+(-9.774e-05)*x^2
print(fit_curve)
# Optimize the above curve
cst<-c(17000,18000,20000,22000,24000,26000,32000)
maxcost<-list()
maxcm<-list()
for ( i in 1:length(cst))
{
xmax <- optimize(fit_curve, c(0, cst[i]	), tol = 0.0001, maximum = TRUE)
maxcost[i]<-floor(xmax$maximum)
maxcm[i] <- floor(xmax$objective)
}
t<-as.data.frame(maxcost)
t1<-as.data.frame(maxcm)
proj<-cbind(t,t1)
ggplot(data=proj,aes(x=maxcost,y=maxcm))+
geom_point()+geom_line()+ ggtitle('CM vs Cost')
ggplot(data=proj,aes(x=maxcost,y=maxcm))+
geom_point()
ggplot(data=proj,aes(x=maxcost,y=maxcm)) +  geom_point()
proj<-cbind(t,t1)
View(proj)
View(t)
t<-maxcost
t
t1<-maxcm
proj<-cbind( cbind(as.data.frame(t,t1)))
t1<-maxcm
proj<-cbind(as.data.frame(t,t1))
t
t1
cbind(t,t1)
as.data.frame(t)
cbind(t,t1)
proj<-as.data.frame(cbind(t,t1))
View(proj)
maxcost<-maxcost
maxcm<-maxcm
proj<-as.data.frame(cbind(t,t1))
ggplot(data=proj,aes(x=maxcost,y=maxcm)) +
geom_point()+geom_line()
View(proj)
maxcost<-maxcost
maxcm<-maxcm
proj<-as.data.frame(cbind(t,t1))
View(proj)
View(proj)
t<-maxcost
t1<-maxcm
proj<-as.data.frame(cbind(t,t1))
ggplot(data=proj,aes(x=t,y=t1)) +
geom_point()+geom_line()
ggplot(data=proj,aes(x=t,y=t1)) +
geom_point()
cst<-c(17000,18000,20000,22000,24000,26000,32000)
maxcost<-list()
maxcm<-list()
for ( i in 1:length(cst))
{
xmax <- optimize(fit_curve, c(0, cst[i]	), tol = 0.0001, maximum = TRUE)
maxcost[i]<-floor(xmax$maximum)
maxcm[i] <- floor(xmax$objective)
}
t<-maxcost
t1<-maxcm
proj<-as.data.frame(cbind(t,t1))
View(proj)
ggplot(data=proj,aes(x=t,y=t1)) +
geom_point()+geom_line()
View(proj)
cst<-c(17000,18000,20000,22000,24000,26000,32000)
maxcost<-list()
maxcm<-list()
for ( i in 1:length(cst))
{
xmax <- optimize(fit_curve, c(0, cst[i]	), tol = 0.0001, maximum = TRUE)
maxcost[i]<-floor(xmax$maximum)
maxcm[i] <- floor(xmax$objective)
}
t<-maxcost
t1<-maxcm
View(t)
proj<-as.data.frame(cbind(cst,t1))
View(proj)
ggplot(data=proj,aes(x=cst,y=t1)) +
geom_point()+geom_line()
View(proj)
plot(cst,t1)
ggplot(data=proj,aes(x=cst,y=t1)) +
geom_point()
View(proj)
plot(x=cst,y=t1)
View(proj)
proj<-as.data.frame(cbind(cst,t1))
names(proj)<-('budget limit','cm')
names(proj)<-c('budget limit','cm')
View(proj)
t1<-maxcm
t2<-maxcost
proj<-as.data.frame(cbind(cst,t1,t2))
names(proj)<-c('budget limit','cm','maxcost')
View(proj)
cst<-c(17000,18000,20000,22000,24000,26000,28000,35000)
maxcost<-list()
maxcm<-list()
for ( i in 1:length(cst))
{
xmax <- optimize(fit_curve, c(0, cst[i]	), tol = 0.0001, maximum = TRUE)
maxcost[i]<-floor(xmax$maximum)
maxcm[i] <- floor(xmax$objective)
}
t1<-maxcm
t2<-maxcost
proj<-as.data.frame(cbind(cst,t1,t2))
names(proj)<-c('budget limit','cm','maxcost')
View(proj)
xmax <- optimize(fit_curve, c(0, 17000	), tol = 0.0001, maximum = TRUE)
xmax
f(17000)
f(32000)
f(17000)
f(18000)
proj
f(18000)
xmax <- optimize(fit_curve, c(0, 32000	), tol = 0.0001, maximum = TRUE)
maxcost<-floor(xmax$maximum)
maxcm <- floor(xmax$objective)
cst<-c(17000,18000,20000,22000,24000,26000,32000)
for ( i in 1:length(cst))
{
t<-f(c[i])
}
cst<-c(17000,18000,20000,22000,24000,26000,32000)
for ( i in 1:length(cst))
{
t[i]<-f(c[i])
}
cst<-c(17000,18000,20000,22000,24000,26000,32000)
for ( i in 1:length(cst))
{
t[i]<-fit_curve(c[i])
}
cst<-c(17000,18000,20000,22000,24000,26000,32000)
for ( i in 1:length(cst))
{
t[i]<-fit_curve(cst[i])
}
t
t1<-as.data(cbind(cst,t))
t1<-as.data.frame(cbind(cst,t))
View(t1)
cst<-c(17000,18000,20000,22000,24000,25000,26000,32000)
for ( i in 1:length(cst))
{
t[i]<-fit_curve(cst[i])
}
t1<-as.data.frame(cbind(cst,t))
View(t1)
ggplot(df=t1,aes(x=cst,y=t))+geom_point()
ggplot(df=t1,aes(x=cst,y=t))+geom_point
ggplot(df=t1,aes(x=cst,y=t))+geom_point()
ggplot(data =t1,aes(x=cst,y=t))+geom_point()
ggplot(data =as.numeric(t1),aes(x=cst,y=t))+geom_point()
t1
t$cst<-as.numeric(t$cst)
t1$cst<-as.numeric(t1$cst)
t1$t<-as.numeric(t1$t)
ggplot(data =as.numeric(t1),aes(x=cst,y=t))+geom_point()
ggplot(data =t1,aes(x=cst,y=t))+geom_point()
View(t1)
cst<-c(17000,18000,20000,22000,24000,25000,26000,32000)
for ( i in 1:length(cst))
{
cm[i]<-fit_curve(cst[i])
}
t1<-as.data.frame(cbind(cst,cm))
ggplot(data =t1,aes(x=cst,y=cm))+geom_point()
t1<-as.data.frame(cbind(as.numeric(cst),as.numeric(cm))
ggplot(data =t1,aes(x=cst,y=t))+geom_point()
ggplot(data =t1,aes(x=cst,y=cm))+geom_point()
t1<-as.data.frame(cbind(as.numeric(cst),as.numeric(cm))
)
t1$cst<-as.numeric(t1$cst)
t1$cm<-as.numeric(t1$cm)
t1<-as.data.frame(cbind(cst,cm))
t1$cst<-as.numeric(t1$cst)
t1$cm<-as.numeric(t1$cm)
ggplot(data =t1,aes(x=cst,y=cm))+geom_point()
cst<-c(17000,18000,20000,22000,24000,25000,26000,32000)
for ( i in 1:length(cst))
{
cm[i]<-fit_curve(cst[i])
}
t1<-as.data.frame(cbind(cst,cm))
cst<-c(17000,18000,20000,22000,24000,25000,26000,32000)
for ( i in 1:length(cst))
{
cm[i]<-fit_curve(cst[i])
}
cst<-c(17000,18000,20000,22000,24000,25000,26000,32000)
for ( i in 1:length(cst))
{
cm[i]<-fit_curve(cst[i])
}
fit_curve
cst<-c(17000,18000,20000,22000,24000,25000,26000,32000)
for ( i in 1:length(cst))
{
cm[i]<-fit_curve(cst[i])
}
cst<-c(17000,18000,20000,22000,24000,25000,26000,32000)
for ( i in 1:length(cst))
{
cm[i]<-fit_curve(cst[i])
}
for ( i in 1:length(cst))
{
cm[i]<-fit_curve(cst[i])
}
cst<-c(17000,18000,20000,22000,24000,25000,26000,32000)
cm<-list()
for ( i in 1:length(cst))
{
cm[i]<-fit_curve(cst[i])
}
t1<-as.data.frame(cbind(cst,cm))
t1$cst<-as.numeric(t1$cst)
t1$cm<-as.numeric(t1$cm)
ggplot(data =t1,aes(x=cst,y=cm))+geom_point()
ggplot(data =t1,aes(x=cst,y=cm))+geom_point()
?seq
cst<-seq(from=17000, to =36000,by=20000)
cst
seq(0, 1, length.out = 11)
cst<-seq(from=17000, to =36000,by=20000, length.out = 10)
cst<-seq(from=17000, to =36000,by=2000, length.out = 10)
cst<-seq(from=17000, to =36000,by=2000, length.out = 20)
cst<-seq(from=18000, to =36000,by=2000, length.out = 8)
cst<-seq(from=18000, to =36000,by=2000, length.out = 10)
cst<-seq(from=18000, to =36000,by=2000, length.out =8)
cst<-seq(18000,36000,by=2000, length.out =8)
cst<-seq(18000,36000,by=2000, length.out =10)
cst<-seq(18000,36000,by=2000)
cst
for ( i in 1:length(cst))
{
cm[i]<-fit_curve(cst[i])
}
t1<-as.data.frame(cbind(cst,cm))
t1$cst<-as.numeric(t1$cst)
t1$cm<-as.numeric(t1$cm)
ggplot(data =t1,aes(x=cst,y=cm))+geom_point()
cst<-seq(18000,40000,by=2000)
for ( i in 1:length(cst))
{
cm[i]<-fit_curve(cst[i])
}
t1<-as.data.frame(cbind(cst,cm))
t1$cst<-as.numeric(t1$cst)
t1$cm<-as.numeric(t1$cm)
ggplot(data =t1,aes(x=cst,y=cm))+geom_point()
cst
for ( i in 1:length(cst))
{
cm[i]<-fit_curve(cst[i])
}
t1<-as.data.frame(cbind(cst,cm))
t1$cst<-as.numeric(t1$cst)
t1$cm<-as.numeric(t1$cm)
ggplot(data =t1,aes(x=cst,y=cm))+geom_point()
cst
fit_curve(18000)
fit_curve(cst[1])
names(budsim)
model_data<-budsim%>%select(`Actual Spend (16 day period)`,CM)
model_data
model<-lm(CM~poly(`Actual Spend (16 day period)`,2,raw=TRUE),data=model_data)
tab_model(model)
View(model_data)
devtools::install_github("nwstephens/rmdcss")
require(rmdcss)
library(devtools)
install_github("Pakillo/rmdTemplates")
require(rmdTemplates)
View(model2)
View(opt1)
install.packages("epurate")
install.packages('epurate')
install.packages('epuRate')
library(rmarkdown)
library(devtools)
install_github("holtzy/epuRate")
require(epuRate)
unlink('Untitled_cache', recursive = TRUE)
View(opt)
View(newdat)
install.packages(c("plotly", "qqman"))
install.packages("plotly")
install.packages("gapminder")
